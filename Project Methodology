# Importing Libraries
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import statistics

#  Read the dataset
df = pd.read_csv(r'D:\Data Sience Methodology , data project\bike_sales_100k.csv')

# Display initial data structure and summary
print("Dataset Head:")
print(df.head())
print("\nDataset Info:")
print(df.info())

#  Clean and Prepare the Data
# Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y', errors='coerce')

# Check for missing values
print("\nMissing Values per Column:")
print(df.isnull().sum())

# Encode categorical columns
label_encoders = {}
categorical_columns = ['Bike_Model', 'Store_Location', 'Payment_Method', 'Customer_Gender']

for column in categorical_columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le

# Add a Revenue column (Price * Quantity)
df['Revenue'] = df['Price'] * df['Quantity']

#  Data Visualization
# Visualize Customer Age distribution
plt.figure(figsize=(10, 6))
sns.histplot(df['Customer_Age'], bins=20, kde=True, color='skyblue')
plt.title("Customer Age Distribution")
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.show()

# Sales by Store Location
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Store_Location', palette='viridis')
plt.title("Sales by Store Location")
plt.xlabel("Store Location")
plt.ylabel("Number of Sales")
plt.xticks(rotation=45)
plt.show()

# Revenue by Bike Model
plt.figure(figsize=(12, 6))
sns.boxplot(data=df, x='Bike_Model', y='Revenue', palette='Set2')
plt.title("Revenue Distribution by Bike Model")
plt.xlabel("Bike Model")
plt.ylabel("Revenue")
plt.xticks(rotation=45)
plt.show()

#  Define Features and Target
X = df[['Customer_Age', 'Bike_Model', 'Price', 'Quantity', 'Store_Location', 'Customer_Gender']]
y = df['Payment_Method']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"\nTrain shapes: {X_train.shape}, {y_train.shape}")
print(f"Test shapes: {X_test.shape}, {y_test.shape}")

# Train and Evaluate Models
models = {
    "SVC": SVC(),
    "Gaussian NB": GaussianNB(),
    "Random Forest": RandomForestClassifier(random_state=42)
}

# Evaluate models using cross-validation
for model_name, model in models.items():
    scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')
    print(f"\n{model_name} Cross-Validation Mean Accuracy: {np.mean(scores):.2f}")

# Train final Random Forest Model
final_model = RandomForestClassifier(random_state=42)
final_model.fit(X_train, y_train)

#  Evaluate Final Model
y_pred = final_model.predict(X_test)
print("\nFinal Model Accuracy:")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.show()

#  Prediction Function
def predict_payment_method(input_data):
    """
    Predict the payment method based on input features.
    input_data: dict containing keys:
        - Customer_Age
        - Bike_Model
        - Price
        - Quantity
        - Store_Location
        - Customer_Gender
    """
    features = [
        input_data['Customer_Age'],
        label_encoders['Bike_Model'].transform([input_data['Bike_Model']])[0],
        input_data['Price'],
        input_data['Quantity'],
        label_encoders['Store_Location'].transform([input_data['Store_Location']])[0],
        label_encoders['Customer_Gender'].transform([input_data['Customer_Gender']])[0]
    ]
    prediction = final_model.predict([features])[0]
    payment_method = label_encoders['Payment_Method'].inverse_transform([prediction])[0]
    return payment_method

# Test the prediction function
sample_input = {
    "Customer_Age": 30,
    "Bike_Model": "Cruiser",
    "Price": 1500,
    "Quantity": 2,
    "Store_Location": "Philadelphia",
    "Customer_Gender": "Female"
}
predicted_method = predict_payment_method(sample_input)
print(f"\nPredicted Payment Method: {predicted_method}")
