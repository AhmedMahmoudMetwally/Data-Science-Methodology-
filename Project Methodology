# Importing libraries
import numpy as np
import pandas as pd
from scipy.stats import mode
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import statistics

# Read data 

df=pd.read_csv(r'C:\Users\UP2store\Documents\bike_sales_100k.csv')
print (df)

# Replace 'prognosis' with the actual target column name
target_column = 'prognosis'  # Update this to your dataset's target column name

# Check structure of the dataset
print(data.head())
print(data.info())

# Check if the target column exists
if target_column in data.columns:
    # Count categories in the target column
    disease_counts = data[target_column].value_counts()
    temp_df = pd.DataFrame({
        "Category": disease_counts.index,
        "Counts": disease_counts.values
    })

    plt.figure(figsize=(18, 8))
    sns.barplot(x="Category", y="Counts", data=temp_df)
    plt.xticks(rotation=90)
    plt.show()

    # Encode target values
    encoder = LabelEncoder()
    data[target_column] = encoder.fit_transform(data[target_column])

    # Split data into features and target
    X = data.drop(columns=[target_column])
    y = data[target_column]

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=24)
    print(f"Train: {X_train.shape}, {y_train.shape}")
    print(f"Test: {X_test.shape}, {y_test.shape}")

    # Define scoring function
    def cv_scoring(estimator, X, y):
        return accuracy_score(y, estimator.predict(X))

    # Initialize models
    models = {
        "SVC": SVC(),
        "Gaussian NB": GaussianNB(),
        "Random Forest": RandomForestClassifier(random_state=18)
    }

    # Cross-validation for models
    for model_name in models:
        model = models[model_name]
        scores = cross_val_score(model, X, y, cv=10, n_jobs=-1, scoring=cv_scoring)
        print("==" * 30)
        print(model_name)
        print(f"Scores: {scores}")
        print(f"Mean Score: {np.mean(scores)}")

    # Train final models
    final_svm_model = SVC()
    final_nb_model = GaussianNB()
    final_rf_model = RandomForestClassifier(random_state=18)

    final_svm_model.fit(X, y)
    final_nb_model.fit(X, y)
    final_rf_model.fit(X, y)

    # Function to predict disease based on symptoms
    symptoms = X.columns.values  # Assuming symptoms are features

    # Create a symptom index dictionary
    symptom_index = {}
    for index, value in enumerate(symptoms):
        symptom = " ".join([i.capitalize() for i in value.split("_")])
        symptom_index[symptom] = index

    # Store class and symptom mappings
    data_dict = {
        "symptom_index": symptom_index,
        "predictions_classes": encoder.classes_
    }

    # Define the prediction function
    def predictDisease(symptoms_input):
        symptoms = symptoms_input.split(",")  # Split input by commas

        # Create input data for models
        input_data = [0] * len(data_dict["symptom_index"])
        for symptom in symptoms:
            if symptom in data_dict["symptom_index"]:
                index = data_dict["symptom_index"][symptom]
                input_data[index] = 1
            else:
                print(f"Warning: Symptom '{symptom}' not recognized.")

        # Reshape and format input data
        input_data = np.array(input_data).reshape(1, -1)

        # Predictions from individual models
        rf_prediction = data_dict["predictions_classes"][final_rf_model.predict(input_data)[0]]
        nb_prediction = data_dict["predictions_classes"][final_nb_model.predict(input_data)[0]]
        svm_prediction = data_dict["predictions_classes"][final_svm_model.predict(input_data)[0]]

        # Final prediction by taking the mode
        final_prediction = statistics.mode([rf_prediction, nb_prediction, svm_prediction])

        predictions = {
            "Random Forest Prediction": rf_prediction,
            "Naive Bayes Prediction": nb_prediction,
            "SVM Prediction": svm_prediction,
            "Final Prediction": final_prediction
        }

        return predictions

    # Test the function
    test_symptoms = "Symptom1,Symptom2,Symptom3"  # Replace with actual symptom names
    print(predictDisease(test_symptoms))

else:
    print(f"The target column '{target_column}' is not in the dataset. Please check the column names.")
