#Data-Science-Methodology-

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from flask import Flask, request, jsonify
import warnings
# Read data 

df=pd.read_csv(r'C:\Users\UP2store\Documents\bike_sales_100k.csv')
print (df)

#Checking missing values

print(df.isnull())
print(df.isnull().sum())
print(df)

#Removing null 
df_cleaned = df.dropna()
df_cleaned

# drop duplicated 
df.drop_duplicates(inplace = True )
print(df.duplicated())


# label Encoding
from sklearn.preprocessing import LabelEncoder
for col in df.columns :
    le=LabelEncoder()
    df[col] = le.fit_transform(df[col])
    print(df)

# Feature Encoding
df = pd.get_dummies(df, columns=['season', 'weather'], drop_first=True)

# Feature Scaling
scaler = StandardScaler()
numerical_columns = ['temp', 'atemp', 'humidity', 'windspeed']
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])

# Define target variable and features
X = df.drop(columns=['count'])
y = df['count']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Flask Web Application
app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    input_data = np.array([data[feature] for feature in X.columns]).reshape(1, -1)
    prediction = model.predict(input_data)
    return jsonify({'prediction': prediction[0]})

if __name__ == '__main__':
    app.run(debug=True)
